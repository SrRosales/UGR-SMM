/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package sm.arc.iu;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.image.BufferedImage;

/**
 *
 * @author Alejandro Rosales Cantero
 */
public class VentanaInternaCamara extends javax.swing.JInternalFrame {

    private Webcam camara = null;
    
    /**
     * Constructor privado para crear una instancia de VentanaInternaCamara.
     */
    private VentanaInternaCamara() {
        initComponents();
        
        // Inicializa la cámara
        camara = Webcam.getDefault();
        
        if (camara != null) {
            // Configura la resolución de la cámara
            Dimension resoluciones[] = camara.getViewSizes();
            Dimension maxRes = resoluciones[resoluciones.length - 1];
            camara.setViewSize(maxRes);

            // Crea un panel de visualización para la cámara
            WebcamPanel areaVisual = new WebcamPanel(camara);
            
            if (areaVisual != null) {
                getContentPane().add(areaVisual, BorderLayout.CENTER);
                pack();
            }
        }
    }
    
    /**
     * Método estático para obtener una instancia única de VentanaInternaCamara.
     * 
     * @return Una instancia de VentanaInternaCamara si la cámara está disponible, o null si no lo está.
     */
    public static VentanaInternaCamara getInstance() {
        VentanaInternaCamara v = new VentanaInternaCamara();
        return (v.camara != null ? v : null);
    }
    
    /**
     * Método para obtener la imagen actual capturada por la cámara.
     * 
     * @return La imagen capturada por la cámara, o null si la cámara no está disponible.
     */
    public BufferedImage getImage(){
        return camara!= null ? camara.getImage() : null;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

     /**
     * Método llamado al cerrar la ventana interna, se encarga de cerrar la cámara si está abierta.
     * 
     * @param evt El evento de cierre de la ventana interna.
     */
    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        if(camara!=null){
            camara.close();
        }
    }//GEN-LAST:event_formInternalFrameClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
